{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/hooks/useCustomTheme.ts"],"sourcesContent":["'use client'\n\nimport { useEffect } from 'react'\n\nexport const useCustomTheme = () => {\n  useEffect(() => {\n    // Aplicar tema personalizado salvo no localStorage\n    const applyCustomTheme = () => {\n      const isThemeEnabled = localStorage.getItem('notesapp_theme_enabled')\n      const savedTheme = localStorage.getItem('notesapp_custom_theme')\n      \n      if (isThemeEnabled === 'true' && savedTheme) {\n        try {\n          const theme = JSON.parse(savedTheme)\n          const root = document.documentElement\n          \n          root.style.setProperty('--custom-text-color', theme.textColor)\n          root.style.setProperty('--custom-bg-color', theme.backgroundColor)\n          root.style.setProperty('--custom-accent-color', theme.accentColor)\n          root.style.setProperty('--custom-border-color', theme.borderColor)\n          \n          // Adicionar classe para ativar tema personalizado\n          document.body.classList.add('custom-theme')\n        } catch (error) {\n          console.error('Erro ao aplicar tema personalizado:', error)\n        }\n      }\n    }\n\n    // Aplicar tema na inicialização\n    applyCustomTheme()\n\n    // Observar mudanças no localStorage (para sincronizar entre abas)\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === 'notesapp_custom_theme' || e.key === 'notesapp_theme_enabled') {\n        applyCustomTheme()\n      }\n    }\n\n    window.addEventListener('storage', handleStorageChange)\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange)\n    }\n  }, [])\n}\n"],"names":[],"mappings":";;;AAEA;;AAFA;;AAIO,MAAM,iBAAiB;;IAC5B,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;oCAAE;YACR,mDAAmD;YACnD,MAAM;6DAAmB;oBACvB,MAAM,iBAAiB,aAAa,OAAO,CAAC;oBAC5C,MAAM,aAAa,aAAa,OAAO,CAAC;oBAExC,IAAI,mBAAmB,UAAU,YAAY;wBAC3C,IAAI;4BACF,MAAM,QAAQ,KAAK,KAAK,CAAC;4BACzB,MAAM,OAAO,SAAS,eAAe;4BAErC,KAAK,KAAK,CAAC,WAAW,CAAC,uBAAuB,MAAM,SAAS;4BAC7D,KAAK,KAAK,CAAC,WAAW,CAAC,qBAAqB,MAAM,eAAe;4BACjE,KAAK,KAAK,CAAC,WAAW,CAAC,yBAAyB,MAAM,WAAW;4BACjE,KAAK,KAAK,CAAC,WAAW,CAAC,yBAAyB,MAAM,WAAW;4BAEjE,kDAAkD;4BAClD,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;wBAC9B,EAAE,OAAO,OAAO;4BACd,QAAQ,KAAK,CAAC,uCAAuC;wBACvD;oBACF;gBACF;;YAEA,gCAAgC;YAChC;YAEA,kEAAkE;YAClE,MAAM;gEAAsB,CAAC;oBAC3B,IAAI,EAAE,GAAG,KAAK,2BAA2B,EAAE,GAAG,KAAK,0BAA0B;wBAC3E;oBACF;gBACF;;YAEA,OAAO,gBAAgB,CAAC,WAAW;YAEnC;4CAAO;oBACL,OAAO,mBAAmB,CAAC,WAAW;gBACxC;;QACF;mCAAG,EAAE;AACP;GAzCa","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/components/ThemeWrapper.tsx"],"sourcesContent":["'use client'\n\nimport { useCustomTheme } from '@/hooks/useCustomTheme'\nimport { ReactNode } from 'react'\n\ninterface ThemeWrapperProps {\n  children: ReactNode\n}\n\nexport default function ThemeWrapper({ children }: ThemeWrapperProps) {\n  useCustomTheme()\n  \n  return <>{children}</>\n}\n"],"names":[],"mappings":";;;;AAEA;;;AAFA;;AASe,SAAS,aAAa,EAAE,QAAQ,EAAqB;;IAClE,CAAA,GAAA,iIAAA,CAAA,iBAAc,AAAD;IAEb,qBAAO;kBAAG;;AACZ;GAJwB;;QACtB,iIAAA,CAAA,iBAAc;;;KADQ","debugId":null}}]
}